# -*- coding: utf-8 -*-
"""Proje2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Keskinksn/fe76a77d34731d4893af2a8b9b76cd46/proje2.ipynb
"""

import matplotlib as plt
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
data=pd.read_csv("NetflixOriginals.csv",encoding='unicode_escape')
print(data.head())

#1. Veri setine göre uzun soluklu filmler hangi dilde oluşturulmuştur?
data.groupby("Language").agg({"Runtime": "mean"}).sort_values(by="Runtime", ascending=False)

runtimeSort = data.groupby("Language").agg({"Runtime": "mean"}).sort_values(by="Runtime", ascending=False).reset_index()
fig = px.bar(data_frame=runtimeSort, x=runtimeSort.Language, y=runtimeSort.Runtime)
fig.show()

#2. 2019 Ocak ile 2020 Haziran tarihleri arasında 'Documentary' türünde çekilmiş filmlerin IMDB değerlerini bulup görselleştiriniz.
data["Date"] = pd.to_datetime(data.Premiere)
data.loc[(data["Genre"] == "Documentary") & (data["Date"] > "2019-01-31") & (data["Date"] < "2020-06-01")].head()
docum = data.loc[(data["Genre"] == "Documentary") & (data["Date"] > "2019-01-31") & (data["Date"] < "2020-06-01")].head()
docum["Title"].value_counts()
print(data.loc[(data["Genre"] == "Documentary") & (data["Date"] > "2019-01-31") & (data["Date"] < "2020-06-01")].head())
fig = px.bar(data_frame=docum, x=docum.Title, y=docum["IMDB Score"], labels={"y":"IMDB Score", "index":"Titles"})
fig.update_layout(xaxis={"categoryorder":"total descending"})
fig.show()

#3.İngilizce çekilen filmler içerisinde hangi tür en yüksek IMDB puanına sahiptir?
data.loc[(data["Language"] == "English")]
dfeng = data.loc[(data["Language"] == "English")]
dfeng.sort_values(by="IMDB Score", ascending=False)[0:1]

# 4.'Hindi' Dilinde çekilmiş olan filmlerin ortalama 'runtime' suresi nedir?

Hindi = data.loc[(data["Language"] == "Hindi")]
x = Hindi.Runtime
x.mean()

#5.'Genre' Sütunu kaç kategoriye sahiptir ve bu kategoriler nelerdir? Görselleştirerek ifade ediniz.
data.Genre.nunique()

data.Genre.unique()

genre = data.Genre.value_counts().nlargest(20) 
genre

fig = px.bar(data_frame=genre, x=genre.index, y=genre.values, labels={"y":"Genre Movies", "index":"Genres"})
fig.show()

#6.Veri setinde bulunan filmlerde en çok kullanılan 3 dili bulunuz.
data.Language.unique()

data.Language.value_counts()

top_3_lang = data.Language.value_counts().nlargest(3)
top_3_lang

fig = px.bar(top_3_lang, x=top_3_lang.index, y=top_3_lang.values, labels={"y":"Sayısı", "index":"Dıl"})
fig.show()

7. #IMDB puanı en yüksek olan ilk 10 film hangileridir?
top_10_imdb = data.sort_values("IMDB Score",ascending=False)
top_10_imdb = top_10_imdb[0:10]
top_10_imdb

8. #IMDB puanı ile 'Runtime' arasında nasıl bir korelasyon vardır? İnceleyip görselleştiriniz
data["Runtime"].corr(data["IMDB Score"])
#Belirli bir dağılım yoktur.

data[["IMDB Score", "Runtime"]].corr()

9. #IMDB Puanı en yüksek olan ilk 10 'Genre' hangileridir? Görselleştiriniz.
data.groupby("Genre")["IMDB Score"].nlargest(10)

top_10_genre =data[["Title","Genre","Premiere","Runtime","IMDB Score","Language"]].sort_values(["IMDB Score"], ascending=False)[:10]
top_10_genre

10. #'Runtime' değeri en yüksek olan ilk 10 film hangileridir? Görselleştiriniz.
top_10_ratings = data[["Title","Genre","Premiere","Runtime","IMDB Score","Language"]].sort_values(["Runtime"], ascending=False)[:10]
top_10_ratings

#11. #Hangi yılda en fazla film yayımlanmıştır? Görselleştiriniz
data['Year'] = data['Date'].dt.year
data['Year'].value_counts(sort=True)[0:1]
year = data['Year'].value_counts(sort=True)


fig = px.bar(data_frame=data, x=year.index, y=year.values, labels={"y":"Count of Movies per each Year", "x":"Year"})
fig.update_layout(xaxis={'categoryorder':'total descending'})

fig.show()

12. #Hangi dilde yayımlanan filmler en düşük ortalama IMBD puanına sahiptir? Görselleştiriniz.
low_10_mov = data[["Title","Genre","Premiere","Runtime","IMDB Score","Language"]].sort_values(["IMDB Score"], ascending=True)[:10]
low_10_mov

low_10_mov = data.groupby("Language")["IMDB Score"].mean().nsmallest(15)
low_10_mov
fig = px.bar(low_10_mov, x=low_10_mov.index, y=low_10_mov.values, 
             labels={'y':'Average Rating Score', 'x':'Language'})
fig.show()

13. #Hangi yılın toplam "runtime" süresi en fazladır?
data.groupby("Year").agg({"Runtime": "sum"}).sort_values(by="Runtime", ascending=False)[0:1]

year = data.Year.value_counts()
RunYear = data.groupby("Year").agg({"Runtime": "sum"}).sort_values(by="Runtime", ascending=False)
fig = px.bar(data_frame=RunYear, x=RunYear.index, y=RunYear.Runtime)
fig.show()

14. #Her bir dilin en fazla kullanıldığı "Genre" nedir?
dLanguage = data.groupby(["Genre"])["Language"].size().reset_index(name='counts')
g = dLanguage.sort_values(by='counts',ascending=False)
g

#15.Veri setinde outlier veri var mıdır? Açıklayınız.

def grab_col_names(dataframe, cat_th=10, car_th=20):
    # cat_cols, cat_but_car
    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]
    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and
                   dataframe[col].dtypes != "O"]
    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and
                   dataframe[col].dtypes == "O"]
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]

    # num_cols
    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O"]
    num_cols = [col for col in num_cols if col not in num_but_cat]

    # print(f"Observations: {dataframe.shape[0]}")
    # print(f"Variables: {dataframe.shape[1]}")
    # print(f'cat_cols: {len(cat_cols)}')
    # print(f'num_cols: {len(num_cols)}')
    # print(f'cat_but_car: {len(cat_but_car)}')
    # print(f'num_but_cat: {len(num_but_cat)}')
    return cat_cols, num_cols, cat_but_car

def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):
    quartile1 = dataframe[col_name].quantile(q1)
    quartile3 = dataframe[col_name].quantile(q3)
    interquantile_range = quartile3 - quartile1
    up_limit = quartile3 + 1.5 * interquantile_range
    low_limit = quartile1 - 1.5 * interquantile_range
    return low_limit, up_limit


def check_outlier(dataframe, col_name, q1=0.25, q3=0.75):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)
    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):
        return True
    else:
        return False

print("conclusion: Sonuç: Veri setinde belirlenen uç değerlerle herhangi bir aykırı değer yoktur.")